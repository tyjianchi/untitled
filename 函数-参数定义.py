#---------------------------------------------------------------------------------------
#------------------------------------------------函数定义总结---------------------------
#---------------------------------------------------------------------------------------
#在多次同时调用时，可能会出现可变对象问题，[]是一个可变合集，如果在被多次调用是，[]中的结果会被改写。所以在定义默认参数值时，最好采用不可变值
#暂时未证实
def add_end(L=None):
    if L is None:
        L=[]
    L.append('End')
    return L


#单一参数，但可以输入list，变相输入多个参数
#可变参数*parameter,可输入多个参数
def calc(*numbers):
    s = 0
    for n in numbers:
        s = s + n * n
    return s
#函数如果已经定义了*，当输入多个参数的时候需要用逗号分隔，如果不分割可以在入参中加入*
num=[1,2,3]
#print(calc(num[1]))
#print(calc(*num))
#*，可变参数可以传入0或者多个参数
#print(calc())


# **kw:关键字位置，可以用于扩展属性，当一个函数已经定义了固定的参数位置，但需要扩展时，可以在关键字位置增加扩展信息
def person(name, age, **kw):
    print("name:", name, "age:", age, "other:", kw)
# print(person("adf",12,city='adfadf',job='asdfa'))
kw = {'aa': 'bb', 'dd': 'cc'}
# print(person('xxxx',12,**kw))


# 在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，
# 但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。
# 默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！


# 使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。
# 如果缺少*，Python解释器将无法识别位置参数和命名关键字参数：
def person1(name, age, *, city, job):
    print(name, age, city, job)


# print(person1('adf',123,job='ads',city='adsf'))

# 所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。
def func(name, age=21, *money, **hobby):
    print(name, age, money, hobby)
m = (1, 2, 3, 4, 5)
h = {'hobby': 'sport', 'hobby': 'japanese'}
# 在函数定义的时候，定义为可变参数，但是在入参时，定义为普通参数，结果集中会带有（）集合，如果入参定义为*入参，那么只会得到参数本身。
func('fjy', 22, m, 'aaaa', **h)
func('fjy', 22, *m, **h)